// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/kv"
)

type Tx struct {
	BucketStub        func(context.Context, kv.BucketName) (kv.Bucket, error)
	bucketMutex       sync.RWMutex
	bucketArgsForCall []struct {
		arg1 context.Context
		arg2 kv.BucketName
	}
	bucketReturns struct {
		result1 kv.Bucket
		result2 error
	}
	bucketReturnsOnCall map[int]struct {
		result1 kv.Bucket
		result2 error
	}
	CreateBucketStub        func(context.Context, kv.BucketName) (kv.Bucket, error)
	createBucketMutex       sync.RWMutex
	createBucketArgsForCall []struct {
		arg1 context.Context
		arg2 kv.BucketName
	}
	createBucketReturns struct {
		result1 kv.Bucket
		result2 error
	}
	createBucketReturnsOnCall map[int]struct {
		result1 kv.Bucket
		result2 error
	}
	CreateBucketIfNotExistsStub        func(context.Context, kv.BucketName) (kv.Bucket, error)
	createBucketIfNotExistsMutex       sync.RWMutex
	createBucketIfNotExistsArgsForCall []struct {
		arg1 context.Context
		arg2 kv.BucketName
	}
	createBucketIfNotExistsReturns struct {
		result1 kv.Bucket
		result2 error
	}
	createBucketIfNotExistsReturnsOnCall map[int]struct {
		result1 kv.Bucket
		result2 error
	}
	DeleteBucketStub        func(context.Context, kv.BucketName) error
	deleteBucketMutex       sync.RWMutex
	deleteBucketArgsForCall []struct {
		arg1 context.Context
		arg2 kv.BucketName
	}
	deleteBucketReturns struct {
		result1 error
	}
	deleteBucketReturnsOnCall map[int]struct {
		result1 error
	}
	ListBucketNamesStub        func(context.Context) (kv.BucketNames, error)
	listBucketNamesMutex       sync.RWMutex
	listBucketNamesArgsForCall []struct {
		arg1 context.Context
	}
	listBucketNamesReturns struct {
		result1 kv.BucketNames
		result2 error
	}
	listBucketNamesReturnsOnCall map[int]struct {
		result1 kv.BucketNames
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Tx) Bucket(arg1 context.Context, arg2 kv.BucketName) (kv.Bucket, error) {
	fake.bucketMutex.Lock()
	ret, specificReturn := fake.bucketReturnsOnCall[len(fake.bucketArgsForCall)]
	fake.bucketArgsForCall = append(fake.bucketArgsForCall, struct {
		arg1 context.Context
		arg2 kv.BucketName
	}{arg1, arg2})
	stub := fake.BucketStub
	fakeReturns := fake.bucketReturns
	fake.recordInvocation("Bucket", []interface{}{arg1, arg2})
	fake.bucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Tx) BucketCallCount() int {
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	return len(fake.bucketArgsForCall)
}

func (fake *Tx) BucketCalls(stub func(context.Context, kv.BucketName) (kv.Bucket, error)) {
	fake.bucketMutex.Lock()
	defer fake.bucketMutex.Unlock()
	fake.BucketStub = stub
}

func (fake *Tx) BucketArgsForCall(i int) (context.Context, kv.BucketName) {
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	argsForCall := fake.bucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Tx) BucketReturns(result1 kv.Bucket, result2 error) {
	fake.bucketMutex.Lock()
	defer fake.bucketMutex.Unlock()
	fake.BucketStub = nil
	fake.bucketReturns = struct {
		result1 kv.Bucket
		result2 error
	}{result1, result2}
}

func (fake *Tx) BucketReturnsOnCall(i int, result1 kv.Bucket, result2 error) {
	fake.bucketMutex.Lock()
	defer fake.bucketMutex.Unlock()
	fake.BucketStub = nil
	if fake.bucketReturnsOnCall == nil {
		fake.bucketReturnsOnCall = make(map[int]struct {
			result1 kv.Bucket
			result2 error
		})
	}
	fake.bucketReturnsOnCall[i] = struct {
		result1 kv.Bucket
		result2 error
	}{result1, result2}
}

func (fake *Tx) CreateBucket(arg1 context.Context, arg2 kv.BucketName) (kv.Bucket, error) {
	fake.createBucketMutex.Lock()
	ret, specificReturn := fake.createBucketReturnsOnCall[len(fake.createBucketArgsForCall)]
	fake.createBucketArgsForCall = append(fake.createBucketArgsForCall, struct {
		arg1 context.Context
		arg2 kv.BucketName
	}{arg1, arg2})
	stub := fake.CreateBucketStub
	fakeReturns := fake.createBucketReturns
	fake.recordInvocation("CreateBucket", []interface{}{arg1, arg2})
	fake.createBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Tx) CreateBucketCallCount() int {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	return len(fake.createBucketArgsForCall)
}

func (fake *Tx) CreateBucketCalls(stub func(context.Context, kv.BucketName) (kv.Bucket, error)) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = stub
}

func (fake *Tx) CreateBucketArgsForCall(i int) (context.Context, kv.BucketName) {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	argsForCall := fake.createBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Tx) CreateBucketReturns(result1 kv.Bucket, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	fake.createBucketReturns = struct {
		result1 kv.Bucket
		result2 error
	}{result1, result2}
}

func (fake *Tx) CreateBucketReturnsOnCall(i int, result1 kv.Bucket, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	if fake.createBucketReturnsOnCall == nil {
		fake.createBucketReturnsOnCall = make(map[int]struct {
			result1 kv.Bucket
			result2 error
		})
	}
	fake.createBucketReturnsOnCall[i] = struct {
		result1 kv.Bucket
		result2 error
	}{result1, result2}
}

func (fake *Tx) CreateBucketIfNotExists(arg1 context.Context, arg2 kv.BucketName) (kv.Bucket, error) {
	fake.createBucketIfNotExistsMutex.Lock()
	ret, specificReturn := fake.createBucketIfNotExistsReturnsOnCall[len(fake.createBucketIfNotExistsArgsForCall)]
	fake.createBucketIfNotExistsArgsForCall = append(fake.createBucketIfNotExistsArgsForCall, struct {
		arg1 context.Context
		arg2 kv.BucketName
	}{arg1, arg2})
	stub := fake.CreateBucketIfNotExistsStub
	fakeReturns := fake.createBucketIfNotExistsReturns
	fake.recordInvocation("CreateBucketIfNotExists", []interface{}{arg1, arg2})
	fake.createBucketIfNotExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Tx) CreateBucketIfNotExistsCallCount() int {
	fake.createBucketIfNotExistsMutex.RLock()
	defer fake.createBucketIfNotExistsMutex.RUnlock()
	return len(fake.createBucketIfNotExistsArgsForCall)
}

func (fake *Tx) CreateBucketIfNotExistsCalls(stub func(context.Context, kv.BucketName) (kv.Bucket, error)) {
	fake.createBucketIfNotExistsMutex.Lock()
	defer fake.createBucketIfNotExistsMutex.Unlock()
	fake.CreateBucketIfNotExistsStub = stub
}

func (fake *Tx) CreateBucketIfNotExistsArgsForCall(i int) (context.Context, kv.BucketName) {
	fake.createBucketIfNotExistsMutex.RLock()
	defer fake.createBucketIfNotExistsMutex.RUnlock()
	argsForCall := fake.createBucketIfNotExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Tx) CreateBucketIfNotExistsReturns(result1 kv.Bucket, result2 error) {
	fake.createBucketIfNotExistsMutex.Lock()
	defer fake.createBucketIfNotExistsMutex.Unlock()
	fake.CreateBucketIfNotExistsStub = nil
	fake.createBucketIfNotExistsReturns = struct {
		result1 kv.Bucket
		result2 error
	}{result1, result2}
}

func (fake *Tx) CreateBucketIfNotExistsReturnsOnCall(i int, result1 kv.Bucket, result2 error) {
	fake.createBucketIfNotExistsMutex.Lock()
	defer fake.createBucketIfNotExistsMutex.Unlock()
	fake.CreateBucketIfNotExistsStub = nil
	if fake.createBucketIfNotExistsReturnsOnCall == nil {
		fake.createBucketIfNotExistsReturnsOnCall = make(map[int]struct {
			result1 kv.Bucket
			result2 error
		})
	}
	fake.createBucketIfNotExistsReturnsOnCall[i] = struct {
		result1 kv.Bucket
		result2 error
	}{result1, result2}
}

func (fake *Tx) DeleteBucket(arg1 context.Context, arg2 kv.BucketName) error {
	fake.deleteBucketMutex.Lock()
	ret, specificReturn := fake.deleteBucketReturnsOnCall[len(fake.deleteBucketArgsForCall)]
	fake.deleteBucketArgsForCall = append(fake.deleteBucketArgsForCall, struct {
		arg1 context.Context
		arg2 kv.BucketName
	}{arg1, arg2})
	stub := fake.DeleteBucketStub
	fakeReturns := fake.deleteBucketReturns
	fake.recordInvocation("DeleteBucket", []interface{}{arg1, arg2})
	fake.deleteBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Tx) DeleteBucketCallCount() int {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	return len(fake.deleteBucketArgsForCall)
}

func (fake *Tx) DeleteBucketCalls(stub func(context.Context, kv.BucketName) error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = stub
}

func (fake *Tx) DeleteBucketArgsForCall(i int) (context.Context, kv.BucketName) {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	argsForCall := fake.deleteBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Tx) DeleteBucketReturns(result1 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	fake.deleteBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *Tx) DeleteBucketReturnsOnCall(i int, result1 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	if fake.deleteBucketReturnsOnCall == nil {
		fake.deleteBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Tx) ListBucketNames(arg1 context.Context) (kv.BucketNames, error) {
	fake.listBucketNamesMutex.Lock()
	ret, specificReturn := fake.listBucketNamesReturnsOnCall[len(fake.listBucketNamesArgsForCall)]
	fake.listBucketNamesArgsForCall = append(fake.listBucketNamesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListBucketNamesStub
	fakeReturns := fake.listBucketNamesReturns
	fake.recordInvocation("ListBucketNames", []interface{}{arg1})
	fake.listBucketNamesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Tx) ListBucketNamesCallCount() int {
	fake.listBucketNamesMutex.RLock()
	defer fake.listBucketNamesMutex.RUnlock()
	return len(fake.listBucketNamesArgsForCall)
}

func (fake *Tx) ListBucketNamesCalls(stub func(context.Context) (kv.BucketNames, error)) {
	fake.listBucketNamesMutex.Lock()
	defer fake.listBucketNamesMutex.Unlock()
	fake.ListBucketNamesStub = stub
}

func (fake *Tx) ListBucketNamesArgsForCall(i int) context.Context {
	fake.listBucketNamesMutex.RLock()
	defer fake.listBucketNamesMutex.RUnlock()
	argsForCall := fake.listBucketNamesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Tx) ListBucketNamesReturns(result1 kv.BucketNames, result2 error) {
	fake.listBucketNamesMutex.Lock()
	defer fake.listBucketNamesMutex.Unlock()
	fake.ListBucketNamesStub = nil
	fake.listBucketNamesReturns = struct {
		result1 kv.BucketNames
		result2 error
	}{result1, result2}
}

func (fake *Tx) ListBucketNamesReturnsOnCall(i int, result1 kv.BucketNames, result2 error) {
	fake.listBucketNamesMutex.Lock()
	defer fake.listBucketNamesMutex.Unlock()
	fake.ListBucketNamesStub = nil
	if fake.listBucketNamesReturnsOnCall == nil {
		fake.listBucketNamesReturnsOnCall = make(map[int]struct {
			result1 kv.BucketNames
			result2 error
		})
	}
	fake.listBucketNamesReturnsOnCall[i] = struct {
		result1 kv.BucketNames
		result2 error
	}{result1, result2}
}

func (fake *Tx) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bucketMutex.RLock()
	defer fake.bucketMutex.RUnlock()
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	fake.createBucketIfNotExistsMutex.RLock()
	defer fake.createBucketIfNotExistsMutex.RUnlock()
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	fake.listBucketNamesMutex.RLock()
	defer fake.listBucketNamesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Tx) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kv.Tx = new(Tx)
