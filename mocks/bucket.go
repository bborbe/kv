// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/kv"
)

type Bucket struct {
	DeleteStub        func(context.Context, []byte) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, []byte) (kv.Item, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
	}
	getReturns struct {
		result1 kv.Item
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 kv.Item
		result2 error
	}
	IteratorStub        func() kv.Iterator
	iteratorMutex       sync.RWMutex
	iteratorArgsForCall []struct {
	}
	iteratorReturns struct {
		result1 kv.Iterator
	}
	iteratorReturnsOnCall map[int]struct {
		result1 kv.Iterator
	}
	IteratorReverseStub        func() kv.Iterator
	iteratorReverseMutex       sync.RWMutex
	iteratorReverseArgsForCall []struct {
	}
	iteratorReverseReturns struct {
		result1 kv.Iterator
	}
	iteratorReverseReturnsOnCall map[int]struct {
		result1 kv.Iterator
	}
	PutStub        func(context.Context, []byte, []byte) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 context.Context
		arg2 []byte
		arg3 []byte
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Bucket) Delete(arg1 context.Context, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2Copy})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Bucket) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *Bucket) DeleteCalls(stub func(context.Context, []byte) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *Bucket) DeleteArgsForCall(i int) (context.Context, []byte) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Bucket) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *Bucket) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Bucket) Get(arg1 context.Context, arg2 []byte) (kv.Item, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2Copy})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Bucket) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *Bucket) GetCalls(stub func(context.Context, []byte) (kv.Item, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *Bucket) GetArgsForCall(i int) (context.Context, []byte) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Bucket) GetReturns(result1 kv.Item, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 kv.Item
		result2 error
	}{result1, result2}
}

func (fake *Bucket) GetReturnsOnCall(i int, result1 kv.Item, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 kv.Item
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 kv.Item
		result2 error
	}{result1, result2}
}

func (fake *Bucket) Iterator() kv.Iterator {
	fake.iteratorMutex.Lock()
	ret, specificReturn := fake.iteratorReturnsOnCall[len(fake.iteratorArgsForCall)]
	fake.iteratorArgsForCall = append(fake.iteratorArgsForCall, struct {
	}{})
	stub := fake.IteratorStub
	fakeReturns := fake.iteratorReturns
	fake.recordInvocation("Iterator", []interface{}{})
	fake.iteratorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Bucket) IteratorCallCount() int {
	fake.iteratorMutex.RLock()
	defer fake.iteratorMutex.RUnlock()
	return len(fake.iteratorArgsForCall)
}

func (fake *Bucket) IteratorCalls(stub func() kv.Iterator) {
	fake.iteratorMutex.Lock()
	defer fake.iteratorMutex.Unlock()
	fake.IteratorStub = stub
}

func (fake *Bucket) IteratorReturns(result1 kv.Iterator) {
	fake.iteratorMutex.Lock()
	defer fake.iteratorMutex.Unlock()
	fake.IteratorStub = nil
	fake.iteratorReturns = struct {
		result1 kv.Iterator
	}{result1}
}

func (fake *Bucket) IteratorReturnsOnCall(i int, result1 kv.Iterator) {
	fake.iteratorMutex.Lock()
	defer fake.iteratorMutex.Unlock()
	fake.IteratorStub = nil
	if fake.iteratorReturnsOnCall == nil {
		fake.iteratorReturnsOnCall = make(map[int]struct {
			result1 kv.Iterator
		})
	}
	fake.iteratorReturnsOnCall[i] = struct {
		result1 kv.Iterator
	}{result1}
}

func (fake *Bucket) IteratorReverse() kv.Iterator {
	fake.iteratorReverseMutex.Lock()
	ret, specificReturn := fake.iteratorReverseReturnsOnCall[len(fake.iteratorReverseArgsForCall)]
	fake.iteratorReverseArgsForCall = append(fake.iteratorReverseArgsForCall, struct {
	}{})
	stub := fake.IteratorReverseStub
	fakeReturns := fake.iteratorReverseReturns
	fake.recordInvocation("IteratorReverse", []interface{}{})
	fake.iteratorReverseMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Bucket) IteratorReverseCallCount() int {
	fake.iteratorReverseMutex.RLock()
	defer fake.iteratorReverseMutex.RUnlock()
	return len(fake.iteratorReverseArgsForCall)
}

func (fake *Bucket) IteratorReverseCalls(stub func() kv.Iterator) {
	fake.iteratorReverseMutex.Lock()
	defer fake.iteratorReverseMutex.Unlock()
	fake.IteratorReverseStub = stub
}

func (fake *Bucket) IteratorReverseReturns(result1 kv.Iterator) {
	fake.iteratorReverseMutex.Lock()
	defer fake.iteratorReverseMutex.Unlock()
	fake.IteratorReverseStub = nil
	fake.iteratorReverseReturns = struct {
		result1 kv.Iterator
	}{result1}
}

func (fake *Bucket) IteratorReverseReturnsOnCall(i int, result1 kv.Iterator) {
	fake.iteratorReverseMutex.Lock()
	defer fake.iteratorReverseMutex.Unlock()
	fake.IteratorReverseStub = nil
	if fake.iteratorReverseReturnsOnCall == nil {
		fake.iteratorReverseReturnsOnCall = make(map[int]struct {
			result1 kv.Iterator
		})
	}
	fake.iteratorReverseReturnsOnCall[i] = struct {
		result1 kv.Iterator
	}{result1}
}

func (fake *Bucket) Put(arg1 context.Context, arg2 []byte, arg3 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 context.Context
		arg2 []byte
		arg3 []byte
	}{arg1, arg2Copy, arg3Copy})
	stub := fake.PutStub
	fakeReturns := fake.putReturns
	fake.recordInvocation("Put", []interface{}{arg1, arg2Copy, arg3Copy})
	fake.putMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Bucket) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *Bucket) PutCalls(stub func(context.Context, []byte, []byte) error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *Bucket) PutArgsForCall(i int) (context.Context, []byte, []byte) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Bucket) PutReturns(result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *Bucket) PutReturnsOnCall(i int, result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Bucket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.iteratorMutex.RLock()
	defer fake.iteratorMutex.RUnlock()
	fake.iteratorReverseMutex.RLock()
	defer fake.iteratorReverseMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Bucket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kv.Bucket = new(Bucket)
